<snippet>
	<content><![CDATA[
//--------Dijktra alogorithom for shortest path ---------------------------------------------
const int mx = 1e5+5 ;
struct node
{
	int value ;
	int cost ;
};
std::vector<node> g[mx] ;
bool vis[mx] ;
int dis[mx] ;

void reset(int n){
	for(int i =0 ; i<= n ; i++)
	{
		g[i].clear() ;
		vis[i] = 0;
		dis[i] = INF ;
	}
}
class cmp
{
public:
	bool operator() (node &A, node &B){
		if(A.cost > B.cost) return true ;
		return false ;
	}
	
};
void dijkstra(int source)
{
	priority_queue< node , vector<node> , cmp > PQ ;
	PQ.push({source , 0}) ;

	while(!PQ.empty()){
		node current  = PQ.top() ;
		PQ.pop() ;
		if(!vis[current.value])
		{
			dis[current.value] = current.cost ;
			vis[current.value] = 1 ;
			for(auto it : g[current.value])
				if(!vis[it.value])
					PQ.push({it.value , it.cost + current.cost}) ;
		}
	}
}
//--------Dijktra alogorithom for shortest path ---------------------------------------------
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>DijkstraAlgorithm</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
